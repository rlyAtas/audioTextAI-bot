import TelegramBot, { Message } from 'node-telegram-bot-api';
import { transcribeAudio } from '../../services/transcribeAudio.js';
import { getLogger } from '../../classes/Logger.js';
import { Chat } from '../../classes/Chat.js';
import { Language } from '../../types/common.js';
import { PrismaClient } from '@prisma/client';
// —ç—Ç–æ—Ç —Ñ–∞–π–ª –ª–µ–∂–∏—Ç –≤ types –Ω–æ —ç—Ç–æ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
import { WhisperModel } from '../../types/whisper.js';

const logger = getLogger();
const prisma = new PrismaClient();

/*
 * –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
 * –û–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–¥–µ–Ω—Ç–µ—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–æ–º –∫–∞–∫ –∞—É–¥–∏–æ, –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –∫–∞–∫ –≥–æ–ª–æ—Å
 * –ø–æ—ç—Ç–æ–º—É –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∑–∞–º—ã–∫–∞–µ–º —Å—é–¥–∞
 */
export async function handlerAudio(bot: TelegramBot, message: Message) {
  const chatId = message.chat.id;
  let language: Language = 'english';

  try {
    logger.debug(`[handlerAudio] msg = ${JSON.stringify(message)}`);

    // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const telegramId = BigInt(message.from!.id);
    const user = await prisma.user.findUnique({ where: { telegramId } });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø–∞–º–º–µ—Ä–æ–º
    if (user?.isSpammer) {
      // const chat = await Chat.create(bot, chatId, language);
      // TODO —Å–æ–∑–¥–∞—Ç—å –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å–µ Chat –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–ø–∞–º–µ
      // —Ç–∞–∫–∂–µ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è bot –≤ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞ blockUser –∏ unblockUser
      await bot.sendMessage(chatId, 'üö´ –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ —Å–ø–∞–º. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');

      logger.info(
        `[SPAM_BLOCKED] telegramId=${telegramId}, username=${user.username || 'none'}, firstName=${user.firstName}`,
      );
      return;
    }

    language = user!.language as Language;

    const chat = await Chat.create(bot, chatId, language);

    // wav —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ—Å–ø—Ä–∏–Ω—è—Ç—ã –∫–∞–∫ document, –∞ ogg —Ñ–∞–π–ª—ã –∫–∞–∫ voice, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–∫ audio
    const audio = message.audio || message.document || message.voice;

    const supportedTypes = [
      'audio/mpeg',
      'audio/wav',
      'audio/x-wav',
      'audio/ogg',
      'audio/mp4',
      'audio/flac',
      'audio/aac',
    ];
    if (!audio || !audio.mime_type || !supportedTypes.includes(audio.mime_type)) {
      await chat.unsupportedFormat();
      return;
    }

    const fileName = getFileName(message);
    const duration = getDuration(message);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–ª–∏–º–∏—Ç Telegram Bot API: 20 –ú–ë)
    const maxFileSize = 20 * 1024 * 1024; // 20 –ú–ë –≤ –±–∞–π—Ç–∞—Ö
    if (audio.file_size && audio.file_size > maxFileSize) {
      await chat.fileTooLarge(audio.file_size, maxFileSize);
      return;
    }

    const tgMessage = await chat.transcribeFileReceived(fileName, duration);
    if (tgMessage === null) throw new Error('Failed to send transcribe file received message');

    const fileLink = await bot.getFileLink(audio.file_id);

    const model = await getCurrentWhisperModel();
    const transcribe = await transcribeAudio(
      model,
      fileLink,
      chatId,
      chat,
      tgMessage.message_id,
      fileName,
      duration,
      audio.mime_type,
    );
    if (transcribe === null) throw new Error('Transcription failed');

    const { file, previewText } = transcribe;
    await chat.transcribeResult(file, previewText);
  } catch (error: unknown) {
    logger.error(`[handlerAudio] msg = ${JSON.stringify(message)}, error = ${error}`);
    const chat = await Chat.create(bot, chatId, language);
    await chat.technicalIssue();
  }
}

// TODO –ø–æ–¥—É–º–∞–π –µ—â–µ —Ä–∞–∑ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∞, —É —Ç–µ–±—è –≤ types –ª–µ–∂–∞—Ç —Ç–∏–ø—ã –∏ —Ö–µ–ª–ø–µ—Ä—ã
async function getCurrentWhisperModel(): Promise<WhisperModel> {
  const setting = await prisma.appSetting.findUnique({
    where: { key: 'whisperModel' },
  });
  if (!setting) throw new Error('Whisper model setting not found');
  const modelName = setting.value as WhisperModel;
  return modelName;
}

function getFileName(message: Message): string {
  if (message.audio) return message.audio.title || 'audio';
  if (message.document) return message.document.file_name || 'document';
  if (message.voice) return 'voice';
  return 'unknown';
}

function getDuration(message: Message): string {
  let seconds: number | undefined;
  if (message.audio) seconds = message.audio.duration;
  if (message.voice) seconds = message.voice.duration;
  if (seconds === undefined) return 'unknown';

  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = seconds % 60;

  if (hours > 0) {
    return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  } else {
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  }
}
